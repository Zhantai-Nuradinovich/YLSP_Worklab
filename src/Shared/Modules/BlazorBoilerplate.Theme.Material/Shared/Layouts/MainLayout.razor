@inherits LayoutComponentBase
@inject NavigationManager navigationManager
@inject AppState appState
@inject IStringLocalizer<Global> L
@using Radzen.Blazor

<MatDrawerContainer Style="width: 100vw; height: 100vh;" Class="@bbDrawerClass">
    @if (IsAdminOrCoordinator)
    {
        <MatDrawer @bind-Opened="@_navMenuOpened">
            <header class="drawer-header">
                <div class="drawer-logo">
                    <a href="/">
                        <img alt="Worklab" class="logo-img" src="_content/BlazorBoilerplate.Theme.Material/images/logo-work-dark.png">
                    </a>
                </div>
                <UserProfile />
            </header>
            <NavMenu />
        </MatDrawer>
    }
    <MatDrawerContent>
        <MatAppBarContainer Style="display: flex; flex-direction: column; min-height: 100vh;">
            <MatAppBar Fixed="true" Style="background-color: #F8F9FA; border-bottom: 1px solid #D6D5D5; font-family: 'Segoe UI Emoji'">
                <MatAppBarRow>
                    <MatAppBarSection>
                        @if (!IsAdminOrCoordinator)
                        {
                            <MatAppBarTitle Style="padding-left: 100px">
                                <div>
                                    <a href="/">
                                        <img alt="Worklab" class="logo-img" src="_content/BlazorBoilerplate.Theme.Material/images/logo-work.png">
                                    </a>
                                </div>
                            </MatAppBarTitle>
                        }
                        else
                        {
                            <div class="hidden-mdc-down">
                                <MatTooltip Tooltip="@L["AppHoverNavToggle"]">
                                    <MatIconButton Class="navToggle" Icon="menu" ToggleIcon="menu" OnClick="@((e) => NavToggle())" RefBack="@context"></MatIconButton>
                                </MatTooltip>
                                <MatTooltip Tooltip="@L["AppHoverNavMinimize"]">
                                    <MatIconButton Class="navToggle" Icon="format_indent_decrease" ToggleIcon="format_indent_increase" OnClick="@((e) => NavMinify())" RefBack="@context"></MatIconButton>
                                </MatTooltip>
                            </div>
                        }
                        <MatAppBarTitle>
                        </MatAppBarTitle>
                    </MatAppBarSection>
                    <MatAppBarSection Align="@MatAppBarSectionAlign.End" Style="padding-right: 100px;">
                        <div class="menu-beautiful">
                            <div class="links">
                                <TopRightBarSection></TopRightBarSection>
                            </div>
                        </div>
                    </MatAppBarSection>
                </MatAppBarRow>
            </MatAppBar>
            <MatAppBarContent>
                <section>
                    @Body
                </section>
                <Footer></Footer>
            </MatAppBarContent>
        </MatAppBarContainer>
    </MatDrawerContent>
</MatDrawerContainer>
<RadzenDialog />
<RadzenNotification />

@code {
    bool _navMenuOpened = false;
    bool _navMinified = false;
    bool IsAdminOrCoordinator { get; set; } = false;
    public string bbDrawerClass = string.Empty;

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            var profile = await appState.GetUserProfile();

            _navMenuOpened = profile.IsNavOpen;
            _navMinified = profile.IsNavMinified;

            IsAdminOrCoordinator = user.IsInRole("Administrator") || user.IsInRole("Coordinator") ? true : false;
        }
    }

    void NavToggle()
    {
        _navMenuOpened = !_navMenuOpened;

        if (_navMenuOpened)
        {
            bbDrawerClass = "full";
        }
        else
        {
            bbDrawerClass = "closed";
        }

        StateHasChanged();
    }

    void NavLock()
    {
        //Todo Lock Nav
    }

    void NavMinify()
    {
        _navMinified = !_navMinified;

        if (!_navMenuOpened)
        {
            _navMinified = true;
        }

        if (_navMinified)
        {
            bbDrawerClass = "mini";
            _navMenuOpened = true;
        }
        else if (_navMenuOpened)
        {
            bbDrawerClass = "full";
        }

        _navMenuOpened = true;

        StateHasChanged();
    }
}