@page "/account/profile"
@attribute [Authorize]

@inject HttpClient Http
@inject AuthenticationStateProvider authStateProvider
@inject IStringLocalizer<Global> L
@inject IMatToaster matToaster


<MainContainerBase>
    @if (userViewModel == null)
    {
        <LoadingBackground></LoadingBackground>
    }
    else
    {
        <div class="form-group">
            <MatButton Type="submit" form="mainForm" Raised="true">@L["Обновить"]</MatButton>
            @if (userViewModel.HasPassword)
            {
                <MatButton Icon="rotate_right" OnClick="@(() => OpenUpdatePasswordDialog())" Label=@L["Поменять пароль"] Raised="true"></MatButton>
            }
            @if (userViewModel.HasAuthenticator)
            {
                <MatButton Icon="rotate_right" OnClick="@(() => DisableAuthenticator())" Label=@L["Сбросить"] Raised="true"></MatButton>
            }
        </div>
        <EditForm id="mainForm" Model="@userViewModel" OnValidSubmit="@UpdateUser">
            <FluentValidationValidator />
            <ValidationSummary />
            <fieldset>
                <div class="form-group">
                    <MatTextField @bind-Value="@userViewModel.UserName" Label=@L["Логин"] Icon="person" IconTrailing="true" FullWidth="true" Required="true" ReadOnly="true"></MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField @bind-Value="@userViewModel.Email" Label="Email" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField @bind-Value="@userViewModel.FirstName" Label=@L["Имя"] FullWidth="true"></MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField @bind-Value="@userViewModel.LastName" Label=@L["Фамилия"] FullWidth="true"></MatTextField>
                </div>
                <div class="form-group">
                    <strong>@L["Роли"]</strong><br />
                    <MatChipSet>
                        @foreach (var role in userViewModel.Roles)
                        {
                            <MatChip Label="@role"></MatChip>
                        }
                    </MatChipSet>
                </div>
            </fieldset>
        </EditForm>
        @if (userViewModel.TwoFactorEnabled)
        {
            <div class="form-group">
                <MatSlideToggle @bind-Value="@TwoFactorEnabled" Label=@L["TwoFactorAuthentication"] />
            </div>
            @if (userViewModel.BrowserRemembered)
            {
                <div class="form-group">
                    <MatSlideToggle @bind-Value="@BrowserRemembered" Label=@L["Запомнить"] />
                </div>
            }
            if (userViewModel.RecoveryCodes != null)
            {
                <div class="form-group">
                    <MatChipSet>
                        @foreach (var rcode in userViewModel.RecoveryCodes)
                        {
                            <MatChip Label="@rcode"></MatChip>
                        }
                    </MatChipSet>
                </div>
            }
            else
            {
                <div class="form-group">
                    <span>@L["RecoveryCodesLeft"]</span> @userViewModel.CountRecoveryCodes
                </div>
            }
        }
        else
        {
            <h3>@L["TwoFactorAuthentication"]</h3>
            <p>
                Download a two-factor authenticator app like Microsoft Authenticator or Google Authenticator.
            </p>
            <p>Scan the QR Code or enter this key <kbd>@userViewModel.SharedKey</kbd> into your two factor authenticator app. Spaces and casing do not matter.</p>
            <img src="@($"https://chart.googleapis.com/chart?chs=200x200&chld=M|0&cht=qr&chl={userViewModel.AuthenticatorUri}")" />
            <p>
                Once you have scanned the QR code or input the key above, your two factor authentication app will provide you
                with a unique code. Enter the code in the confirmation box below.
            </p>
            <MatTextField @bind-Value="@authenticatorVerificationCodeViewModel.Code" Label=@L["Code"] FullWidth="true"></MatTextField>
            <MatButton OnClick="@EnableAuthenticator">@L["VerifyCode"]</MatButton>
        }

        <MatDialog @bind-IsOpen="@updatePasswordDialogOpen">
            <MatDialogTitle>Password Update for @userViewModel.UserName</MatDialogTitle>
            <MatDialogContent>
                <EditForm Model="@updatePasswordViewModel" OnValidSubmit="@UpdatePassword">
                    <FluentValidationValidator />
                    <ValidationSummary />
                    <fieldset>
                        <div class="form-group">
                            <MatTextField @bind-Value="@updatePasswordViewModel.CurrentPassword" Label=@L["Текущий пароль"] Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                        </div>
                        <div class="form-group">
                            <MatTextField @bind-Value="@updatePasswordViewModel.NewPassword" Label=@L["Новый пароль"] Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                        </div>
                        <div class="form-group">
                            <MatTextField @bind-Value="@updatePasswordViewModel.NewPasswordConfirm" Label=@L["Повторите пароль"] Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                        </div>
                    </fieldset>
                </EditForm>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="@(e => { updatePasswordDialogOpen = false; })">@L["Закрыть"]</MatButton>
                <MatButton OnClick="@UpdatePassword">@L["Обновить пароль"]</MatButton>
            </MatDialogActions>
        </MatDialog>

    }
</MainContainerBase>

@code {
    UserViewModel userViewModel;
    bool updatePasswordDialogOpen = false;
    UpdatePasswordViewModel updatePasswordViewModel { get; set; } = new UpdatePasswordViewModel();
    AuthenticatorVerificationCodeViewModel authenticatorVerificationCodeViewModel { get; set; } = new AuthenticatorVerificationCodeViewModel();
    IdentityAuthenticationStateProvider identityAuthenticationStateProvider;

    public bool BrowserRemembered
    {
        get { return userViewModel.BrowserRemembered; }
        set
        {
            if (userViewModel.BrowserRemembered != value)
                ForgetTwoFactorClient().ContinueWith(t =>
                {
                    if (t.IsFaulted)
                        matToaster.Add(t.Exception.Message, MatToastType.Danger, L["Не удалось"]);
                });
        }
    }

    public bool TwoFactorEnabled
    {
        get { return userViewModel.TwoFactorEnabled; }
        set
        {
            if (userViewModel.TwoFactorEnabled != value)
                EnableDisable2fa().ContinueWith(t =>
                {
                    if (t.IsFaulted)
                        matToaster.Add(t.Exception.Message, MatToastType.Danger, L["Не удалось"]);
                });
        }
    }


    protected override async Task OnInitializedAsync()
    {
        identityAuthenticationStateProvider = (IdentityAuthenticationStateProvider)authStateProvider;

        userViewModel = await identityAuthenticationStateProvider.GetUserViewModel();
    }

    void OpenUpdatePasswordDialog()
    {
        updatePasswordViewModel = new UpdatePasswordViewModel();
        updatePasswordDialogOpen = true;
    }

    async Task UpdatePassword()
    {
        if (updatePasswordViewModel.NewPassword != updatePasswordViewModel.NewPasswordConfirm)
        {
            matToaster.Add(L["Не удалось подтвердить пароль"], MatToastType.Warning);
        }
        else
        {
            try
            {
                var apiResponse = await identityAuthenticationStateProvider.UpdatePassword(updatePasswordViewModel);

                if (apiResponse.IsSuccessStatusCode)
                    matToaster.Add(L["Пароль успешно обновлен"], MatToastType.Success);
                else
                    matToaster.Add(apiResponse.Message, MatToastType.Danger, L["Не удалось обновить пароль"]);
            }
            catch (Exception ex)
            {
                matToaster.Add(ex.Message, MatToastType.Danger, L["Не удалось обновить"]);
            }

            updatePasswordDialogOpen = false;
        }
    }

    async Task UpdateUser()
    {
        try
        {
            var apiResponse = await identityAuthenticationStateProvider.UpdateUser(userViewModel);

            if (apiResponse.IsSuccessStatusCode)
                matToaster.Add(L["Операция успешна"], MatToastType.Success);
            else
                matToaster.Add(apiResponse.Message, MatToastType.Danger, L["Не удалось"]);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, L["Не удалось"]);
        }
    }

    async Task EnableAuthenticator()
    {
        var apiResponse = await identityAuthenticationStateProvider.EnableAuthenticator(authenticatorVerificationCodeViewModel);

        if (apiResponse.IsSuccessStatusCode)
        {
            matToaster.Add(L["Операция успешна"], MatToastType.Success);
            userViewModel = apiResponse.Result;
            StateHasChanged();
        }
        else
            matToaster.Add(apiResponse.Message, MatToastType.Danger, L["Не удалось"]);

    }

    async Task DisableAuthenticator()
    {
        try
        {
            var apiResponse = await identityAuthenticationStateProvider.DisableAuthenticator();

            if (apiResponse.IsSuccessStatusCode)
            {
                matToaster.Add(L["Операция успешна"], MatToastType.Success);
                userViewModel = apiResponse.Result;
                authenticatorVerificationCodeViewModel = new AuthenticatorVerificationCodeViewModel();
                StateHasChanged();
            }
            else
                matToaster.Add(apiResponse.Message, MatToastType.Danger, L["Не удалось"]);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, L["Не удалось"]);
        }

    }

    async Task ForgetTwoFactorClient()
    {
        if (userViewModel.BrowserRemembered)
        {
            var apiResponse = await identityAuthenticationStateProvider.ForgetTwoFactorClient();

            if (apiResponse.IsSuccessStatusCode)
            {
                matToaster.Add(L["Операция успешна"], MatToastType.Success);
                userViewModel = apiResponse.Result;
                StateHasChanged();
            }
            else
            {
                matToaster.Add(apiResponse.Message, MatToastType.Danger, L["Не удалось"]);
            }
        }
    }

    async Task EnableDisable2fa()
    {
        var apiResponse = userViewModel.TwoFactorEnabled ? await identityAuthenticationStateProvider.Disable2fa() : await identityAuthenticationStateProvider.Enable2fa();

        if (apiResponse.IsSuccessStatusCode)
        {
            matToaster.Add(L["Операция успешна"], MatToastType.Success);
            userViewModel = apiResponse.Result;
            StateHasChanged();
        }
        else
        {
            matToaster.Add(apiResponse.Message, MatToastType.Danger, L["Не удалось"]);
        }
    }
}
