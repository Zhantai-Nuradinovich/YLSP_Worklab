@inject IApiClient apiClient
@inject IMatToaster matToaster
@inject IStringLocalizer<Global> L
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@using BlazorBoilerplate.Shared.Models.Account

<AuthorizeView Context="AuthorizeContext">
    <NotAuthorized>
        <div class="alert alert-success">
            <a href="/account/login">Войдите</a> чтобы присоединиться к чату.
        </div>
    </NotAuthorized>
</AuthorizeView>
<AuthorizeView Context="AuthorizeContext">
    <Authorized>
        <div class="comments-container">
            <h1>Комментарии</h1>
            <div class="comments-list">
                @if (Comments == null || Comments.Count == 0)
                {
                    <MatListItem>
                        <MatListItemText>
                            Загрузка сообщений...
                        </MatListItemText>
                    </MatListItem>
                }
                else
                {
                    @foreach (var comment in Comments.OrderBy(x => x.When))
                    {
                        <EditForm Model="@comment" OnValidSubmit="@((e) => DeleteMessage(comment.Id))">
                            <div class="comment-main-level">
                                <div class="comment-avatar"><img src="http://i9.photobucket.com/albums/a88/creaticode/avatar_1_zps8e1c80cd.jpg" alt=""></div>
                                <div class="comment-box">
                                    <div class="comment-head">
                                        <h6 class="comment-name by-author">@comment.UserName</h6>
                                        <span>@comment.When</span>
                                    </div>
                                    <div class="comment-content">
                                        @((MarkupString)comment.Text)
                                    </div>
                                </div>
                                <MatIconButton Icon="delete"
                                               Type="submit"
                                               Style="float: right;">
                                </MatIconButton>
                            </div>
                            <br />
                            <br />
                        </EditForm>
                    }
                }
            </div>
            <EditForm Model="@comment" autocomplete="off">
                <div class="chat-message clearfix">
                    @if (Creating)
                    {
                        <button style="width:100%;" class="btn btn-light">
                            <span class="glyphicon glyphicon-refresh glyphicon-refresh-animate"></span> Отправляется...
                        </button>
                    }
                    else
                    {
                        <InputTextArea @bind-Value="comment.Text"/>
                        <MatButton Style="background-color: #4F94C1; color: snow; border-radius: 5px; margin: 10px;" OnClick="CreateMessage">Отправить</MatButton>
                    }
                </div>
            </EditForm>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public int CourseId { get; set; }

    [Parameter]
    public UserViewModel userViewModel { get; set; }

    public List<Comment> Comments { get; set; } = new List<Comment>();

    Comment comment { get; set; } = new Comment();
    bool IsOpened { get; set; }
    bool Creating { get; set; } = false;
    string avatar = "https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png";

    protected override async Task OnInitializedAsync()
    {
        await ReadComments();
    }

    async Task ReadComments()
    {
        try
        {
            var result = await apiClient.GetComments(CourseId);
            Comments = new List<Comment>(result);
            matToaster.Add(L["One item found", Plural.From("{0} items found", (int)result.InlineCount)], MatToastType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
        }
    }

    async Task DeleteMessage(int id)
    {
        try
        {
            var commentToDelete = Comments.Find(i => i.Id == id);
            apiClient.RemoveEntity(commentToDelete);

            await apiClient.SaveChanges();

            Comments.Remove(commentToDelete);
            StateHasChanged();
            matToaster.Add($"{comment?.Text} deleted", MatToastType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
        }
        comment = new Comment();
    }

    async Task CreateMessage()
    {
        Creating = true;

        comment.CourseID = CourseId;
        comment.SenderId = userViewModel.UserId;
        comment.UserName = userViewModel.UserName;
        comment.When = DateTime.Now;
        //commentDto.Text = await this.QuillHtml.GetHTML();
        try
        {
            apiClient.AddEntity(comment);

            await apiClient.SaveChanges();

            await ReadComments();
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
        }

        Creating = false;
        comment = new Comment();
    }
}