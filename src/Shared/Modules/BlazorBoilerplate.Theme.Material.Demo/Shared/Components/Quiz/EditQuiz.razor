@inject IApiClient apiClient
@inject IMatToaster matToaster
@inject IStringLocalizer<Global> L


@* Добавить плюсик, после которого появляются две нижние кнопки *@
<MatButton OnClick="@((e) => NewQuestionDialogOpen() )">Добавить вопрос</MatButton>
<MatButton OnClick="@((e) => DialogOpen() )">Редактировать</MatButton>
<MatIconButton Icon="delete" OnClick="@(() => deleteDialogOpen = true)"></MatIconButton>


<MatDialog Class="modal" @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle Class="modal-dialog modal-lg">Обновить</MatDialogTitle>
    <MatDialogContent Class="modal-content">
        <EditForm Model="@Quiz">
            <p>
                <MatTextField Label="Название" Id="@($"{Quiz?.QuizName}")" @bind-Value="@Quiz.QuizName"></MatTextField>
            </p>
            @foreach (var newQuestion in quizItems)
            {
                <MatButton OnClick="e => DeleteQuestion(newQuestion)"></MatButton>
                <fieldset>
                    <div class="form-group">
                        <input placeholder="Ваш вопрос" id="@($"{newQuestion?.Question}")" value="@newQuestion?.Question"
                               @onchange="@(e => newQuestion.Question = e.Value.ToString())" />
                    </div>
                    <div class="form-group">
                        <input placeholder="Варианты ответов" id="@($"{newQuestion?.Answers}")" value="@newQuestion?.Answers"
                               @onchange="@(e => newQuestion.Answers = e.Value.ToString())" />
                    </div>
                    <div class="form-group">
                        <input placeholder="Правильный ответ" id="@($"{newQuestion?.RightAnswer}")" value="@newQuestion?.RightAnswer"
                               @onchange="@(e => newQuestion.RightAnswer = e.Value.ToString())" />
                    </div>
                    <div class="form-group">
                        <input placeholder="Путь к картинке" id="@($"{newQuestion?.PicturePath}")" value="@newQuestion?.PicturePath"
                               @onchange="@(e => newQuestion.PicturePath = e.Value.ToString())" />
                    </div>
                </fieldset>
                <MatDivider />
            }
            <br />
            <MatDivider />
            <MatButton OnClick="NewQuestionDialogOpen">Новый вопрос</MatButton>
            <MatDivider />
        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">Закрыть</MatButton>
        <MatButton OnClick="@SaveChanges">Обновить</MatButton>
    </MatDialogActions>
</MatDialog>


<MatDialog Class="modal" IsOpen="@questionDialogIsOpen">
    <MatDialogTitle Class="modal-dialog modal-sm">Вопрос</MatDialogTitle>
    <MatDialogContent Class="modal-content">
        <EditForm Model="@QuizItem" OnValidSubmit="@NewQuestion">
            <fieldset>
                <div class="form-group">
                    <p>
                        <MatTextField @bind-Value="@QuizItem.Question" Label="Ваш вопрос"></MatTextField>
                    </p>
                </div>
                <div class="form-group">
                    <p>
                        <MatTextField @bind-Value="@QuizItem.Answers" Label="Ваши ответы"></MatTextField>
                    </p>
                </div>
                <div class="form-group">
                    <p>
                        <MatTextField @bind-Value="@QuizItem.RightAnswer" Label="Правильный ответ"></MatTextField>
                    </p>
                </div>
                <div class="form-group">
                    <p>
                        <MatTextField @bind-Value="@QuizItem.PicturePath" Label="Путь к картинке"></MatTextField>
                    </p>
                </div>
            </fieldset>
        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@((e) => { questionDialogIsOpen = false ; dialogIsOpen = true; })">Х</MatButton>
        <MatButton Style="text-align: center;" OnClick="@NewQuestion">Дальше</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@deleteDialogOpen" Style="z-index:100">
    <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Подтвердить</MatDialogTitle>
    <MatDialogContent>
        Хотите удалить @Quiz?.Id ?
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { deleteDialogOpen = false; })">Закрыть</MatButton>
        <MatButton OnClick="@DeleteQuiz">Удалить</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    [Parameter]
    public int QuizId { get; set; }

    [Parameter]
    public Quiz Quiz { get; set; }

    public List<QuizItem> quizItems { get; set; } = new List<QuizItem>();

    public QuizItem QuizItem { get; set; } = new QuizItem();

    bool questionDialogIsOpen = false;
    bool dialogIsOpen = false;
    bool deleteDialogOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await GetItems();
    }

    public async Task GetItems()
    {
        try
        {
            var result = await apiClient.GetQuizItems(QuizId);
            quizItems = new List<QuizItem>(result);
            matToaster.Add($"{Quiz.QuizName} items got", MatToastType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
        }
    }

    public void NewQuestionDialogOpen()
    {
        questionDialogIsOpen = true;
        dialogIsOpen = false;
    }

    public void DialogOpen()
    {
        dialogIsOpen = true;
    }

    public void NewQuestion()
    {
        try
        {
            QuizItem.When = DateTime.Now;

            quizItems.Add(QuizItem);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось создать вопрос");
        }

        QuizItem = new QuizItem();
    }

    public async Task NewQuizItems() // В БД, почему-то, айдишник вопроса типа лонг, надо исправить....
    {
        try
        {
            foreach (var item in quizItems)
            {
                if(item.QuizID != Quiz.Id)
                {
                    item.QuizID = Quiz.Id;
                    apiClient.AddEntity(item);
                }
            }

            await apiClient.SaveChanges();
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
        }

        await GetItems();

        StateHasChanged();
    }

    public async Task SaveChanges()
    {
        await NewQuizItems();

        try
        {
            //Чтобы обновить сам тест, не вопросы, нужно вытянуть из БД и сделать команду savechanges, чтобы это было в рамках одного юзинга
            await apiClient.SaveChanges();

            matToaster.Add($"{Quiz.Id} updated", MatToastType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
            matToaster.Add($"error on {Quiz.Id}", MatToastType.Danger, L["Operation Failed"]);
        }

        dialogIsOpen = false;
    }

    public async Task DeleteQuestion(QuizItem quizItem)
    {
        try
        {
            apiClient.RemoveEntity(quizItem);

            quizItems.Remove(quizItem);

            await apiClient.SaveChanges();

            StateHasChanged();

            matToaster.Add($"{quizItem.Question} deleted", MatToastType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
        }
    }

    public async Task DeleteQuiz()
    {
        try
        {
            //if (quizItems.Count != 0)
            //{
            //    foreach (var item in quizItems)
            //    {
            //        apiClient.RemoveEntity(item);
            //    }
            //}
            apiClient.RemoveEntity(Quiz);
            await apiClient.SaveChanges();
            matToaster.Add($"{Quiz.Id} deleted", MatToastType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
        }

        Quiz = new Quiz();
        deleteDialogOpen = false;
    }
}
