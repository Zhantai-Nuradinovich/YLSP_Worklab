@inject IApiClient apiClient
@inject IMatToaster matToaster
@inject IStringLocalizer<Global> L

@if (IsAdminOrCoordinator)
{
    <EditQuiz QuizId="Quiz.Id"/>
}
<div class="my-quiz-container" style="min-height: 400px;">
    <div id="quiz">
        <div class="container-fluid">
            <div id="quiz-stats" class="row text-center">
                <div class="col-xs-3">
                    <i class="fa fa-bar-chart"></i>
                </div>
                @if (IsQuizStarted)
                {
                    <div class="col-xs-3 col-lg-2">
                        <p>Вопрос</p>
                        <span class="animated">@curentQuestion/@quizItems?.Count</span>
                    </div>
                }
                <div class="col-xs-3 col-lg-2 animated">
                    <p>@Quiz?.QuizName</p>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="row" style="justify-content: center;">
                <div class="col-xs-12 col-md-10 col-md-offset-1 text-center">
                    @if (!IsStartButtonClicked)
                    {
                        <div id="quiz-options">
                            @if(quizItems != null && quizItems.Count != 0)
                            {
                                <button class="btn quiz-ans-btn animated pulse" @onclick="StartQuiz">Начать</button>
                            }
                        </div>
                    }
                    else
                    {
                        @if (IsQuizStarted)
                        {
                            <p id="quiz-question" class="animated">@QuizItem?.Question</p> // zoomIn and zoomOut styles should be added/removed, when answered
                            @if (!string.IsNullOrEmpty(QuizItem?.PicturePath))
                            {
                                <img src="@QuizItem?.PicturePath" style="height: 100px; width: 100px" />
                            }
                            <div id="quiz-options">
                                @foreach (var variant in QuizItem?.Answers.Split("1NZN1"))
                                {
                                    <button class="btn quiz-ans-btn animated" @onclick="(e) => NextQuestion(variant)">@variant</button>
                                }
                            </div>
                        }
                        else
                        {
                            <div id="quiz-options">
                                <button class="btn quiz-ans-btn animated pulse">Результат @TotalScore %</button>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<MatDivider />



@code {
    [Parameter]
    public Quiz Quiz { get; set; }

    public List<QuizItem> quizItems { get; set; }

    public List<QuizItem> UserQuizItems { get; set; } = new List<QuizItem>();
    public QuizItem QuizItem { get; set; }
    IEnumerator<QuizItem> Enumerator { get; set; }

    [Parameter]
    public bool IsAdminOrCoordinator { get; set; }

    bool IsQuizStarted { get; set; } = false;
    bool IsStartButtonClicked { get; set; } = false;
    double TotalScore { get; set; } = 0;
    int curentQuestion { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        await GetItems();
    }

    public async Task GetItems()
    {
        try
        {
            var result = await apiClient.GetQuizItems(Quiz.Id);
            quizItems = new List<QuizItem>(result);
            matToaster.Add($"{Quiz.QuizName} items got", MatToastType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
        }
    }

    public void CheckResults()
    {
        //foreach (var question in UserQuizItems)
        //{
        //    if (question.ChoosenAnswer == question.RightAnswer)
        //    {
        //        TotalScore++;
        //    }
        //}
        foreach (var question in quizItems)
        {
            if(question.RightAnswer == UserQuizItems.Find(x => x.Id == question.Id).RightAnswer)
            {
                TotalScore++;
            }
        }


        TotalScore = TotalScore / UserQuizItems.Count * 100;
    }

    public void StartQuiz()
    {
        IsQuizStarted = true;
        IsStartButtonClicked = true;
        Enumerator = quizItems.GetEnumerator();
        if (Enumerator.MoveNext())
        {
            QuizItem = Enumerator.Current;
        }
    }

    public void NextQuestion(string variant)
    {
        //if(QuizItem.RightAnswer == variant) 
        //{
        //    TotalScore++;
        //}
        QuizItem.RightAnswer = variant;
        UserQuizItems.Add(QuizItem);
        if (Enumerator.MoveNext())
        {
            QuizItem = Enumerator.Current;
            curentQuestion++;
        }
        else
        {
            CheckResults();
            IsQuizStarted = false;
            QuizItem = null;
        }
    }
}
