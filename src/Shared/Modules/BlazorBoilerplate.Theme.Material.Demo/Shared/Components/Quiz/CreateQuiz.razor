@inject IApiClient apiClient
@inject IMatToaster matToaster
@inject IStringLocalizer<Global> L


<div style="width:135px;">
    <MatButton Icon="playlist_add" Label="Тест" OnClick="@((e) => OpenDialog())"
               Style="background-color: #4F94C1; color: snow; border-radius: 5px; margin: 10px;"></MatButton>
</div>

<MatDialog Class="modal" @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle Class="modal-dialog modal-lg">Создать</MatDialogTitle>
    <MatDialogContent Class="modal-content">
        <EditForm Model="@Quiz">
            <p>
                <MatTextField Label="Название" Id="@($"{Quiz?.QuizName}")" @bind-Value="@Quiz.QuizName"></MatTextField>
            </p>
            @foreach (var newQuestion in Quiz.Items)
            {
                <fieldset>
                    <div class="form-group">
                        <input placeholder="Ваш вопрос" id="@($"{newQuestion?.Question}")" value="@newQuestion?.Question"
                               @onchange="@(e => newQuestion.Question = e.Value.ToString())" />
                    </div>
                    <div class="form-group">
                        <input placeholder="Варианты ответов" id="@($"{newQuestion?.Answers}")" value="@newQuestion?.Answers"
                               @onchange="@(e => newQuestion.Answers = e.Value.ToString())" />
                    </div>
                    <div class="form-group">
                        <input placeholder="Правильный ответ" id="@($"{newQuestion?.RightAnswer}")" value="@newQuestion?.RightAnswer"
                               @onchange="@(e => newQuestion.RightAnswer = e.Value.ToString())" />
                    </div>
                    <div class="form-group">
                        <input placeholder="Путь к картинке" id="@($"{newQuestion?.PicturePath}")" value="@newQuestion?.PicturePath"
                               @onchange="@(e => newQuestion.PicturePath = e.Value.ToString())" />
                    </div>
                </fieldset>
                <MatDivider />
            }
            <br />
            <MatDivider />
            <MatButton OnClick="@((e) => { dialogIsOpen = false; questionDialogIsOpen = true; })">Вопрос</MatButton>
            <MatDivider />
        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">Закрыть</MatButton>
        <MatButton OnClick="@NewQuiz">Завершить</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog Class="modal" IsOpen="@questionDialogIsOpen">
    <MatDialogTitle Class="modal-dialog modal-sm">Вопрос</MatDialogTitle>
    <MatDialogContent Class="modal-content">
        <EditForm Model="@QuizItem" OnValidSubmit="@NewQuestion">
            <fieldset>
                <div class="form-group">
                    <p>
                        <MatTextField @bind-Value="@QuizItem.Question" Label="Ваш вопрос"></MatTextField>
                    </p>
                </div>
                <div class="form-group">
                    <p>
                        <MatTextField @bind-Value="@QuizItem.Answers" Label="Ваши ответы"></MatTextField>
                    </p>
                </div>
                <div class="form-group">
                    <p>
                        <MatTextField @bind-Value="@QuizItem.RightAnswer" Label="Правильный ответ"></MatTextField>
                    </p>
                </div>
                <div class="form-group">
                    <p>
                        <MatTextField @bind-Value="@QuizItem.PicturePath" Label="Путь к картинке"></MatTextField>
                    </p>
                </div>
            </fieldset>
        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@((e) => { questionDialogIsOpen = false ; dialogIsOpen = true;})">Х</MatButton>
        <MatButton Style="text-align: center;" OnClick="@NewQuestion">Дальше</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    bool dialogIsOpen = false;
    bool questionDialogIsOpen = false;
    //List<QuizItem> quizItems = new List<QuizItem>();
    Quiz Quiz { get; set; } = new Quiz();
    QuizItem QuizItem { get; set; } = new QuizItem();

    [Parameter]
    public int CourseId { get; set; }

    //public async Task DeleteQuestion()
    //{
    //    try
    //    {
    //        apiClient.RemoveEntity(Quiz);
    //        await apiClient.SaveChanges();
    //        matToaster.Add($"{Quiz.QuizName} deleted", MatToastType.Success, L["Operation Successful"]);
    //    }
    //    catch (Exception ex)
    //    {
    //        matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
    //    }

    //    Quiz = new Quiz();
    //}

    public void OpenDialog()
    {
        dialogIsOpen = true;
    }

    public void NewQuestion()
    {
        try
        {
            QuizItem.QuizID = Quiz.Id;
            //quizItems.Add(QuizItem);
            Quiz.Items.Add(QuizItem);
            QuizItem = new QuizItem();
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось создать вопрос");
        }
    }

    public async Task NewQuiz()
    {
        dialogIsOpen = false;
        try
        {
            //foreach (var item in quizItems)
            //{
            //    Quiz.Items.Add(item);
            //}
            Quiz.When = DateTime.Now;
            Quiz.CourseID = CourseId;
            apiClient.AddEntity(Quiz);

            await apiClient.SaveChanges();
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
        }

        Quiz = new Quiz() { When = DateTime.Now };
    }
}
