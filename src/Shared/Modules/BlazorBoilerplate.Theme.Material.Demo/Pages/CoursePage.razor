@page "/courses/{CourseId}"
@inject IApiClient apiClient
@inject IMatToaster matToaster
@inject IStringLocalizer<Global> L
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@using BlazorBoilerplate.Shared.Models.Account
@using Breeze.Sharp
@using BlazorBoilerplate.Theme.Material.Demo.Shared.Components.Text
@using BlazorBoilerplate.Theme.Material.Demo.Shared.Components.Quiz

<MainContainerBase ContentTitle="Начнём!">

    @if (IsAdminOrCoordinator)
    {
        <CreateQuiz CourseId="@(int.Parse(CourseId))" />
        <CreateText CourseId="@(int.Parse(CourseId))" />
    }
    <p class="heading">Надо посмотреть что-нибудь о пагинации контента и попробовать через енумератор. Продумать структуру как у курсеры и добавить привязку к пользователю + почитать об аналитике сайта</p>
    @if (oneContent is Quiz)
    {
        <MatIconButton Icon="delete" OnClick="@(() => deleteQuizDialogOpen = true)"></MatIconButton>
        <OneQuiz Quiz="@(oneContent as Quiz)" IsAdminOrCoordinator="@IsAdminOrCoordinator" />
    }
    else
    {
        <MatIconButton Icon="delete" OnClick="@(() => deleteTextDialogOpen = true)"></MatIconButton>
        <OneText Text="@(oneContent as Text)" IsAdminOrCoordinator="@IsAdminOrCoordinator" />
    }

    <MatButton Label="Вперед"
               Style="background-color: #4F94C1; color: snow; border-radius: 5px; margin: 10px;"
               OnClick="NextStep">
    </MatButton>

    <CommentSection userViewModel="@userViewModel" CourseId="@int.Parse(CourseId)" />
</MainContainerBase>

<MatDialog @bind-IsOpen="@deleteQuizDialogOpen" Style="z-index:100">
    <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Подтвердить</MatDialogTitle>
    <MatDialogContent>
        Хотите удалить @((oneContent as Quiz)?.Id) ?
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { deleteQuizDialogOpen = false; })">Закрыть</MatButton>
        <MatButton OnClick="@(e => DeleteQuiz(oneContent as Quiz))">Удалить</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@deleteTextDialogOpen" Style="z-index:100">
    <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Подтвердить</MatDialogTitle>
    <MatDialogContent>
        Хотите удалить @((oneContent as Text)?.Id) ?
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { deleteTextDialogOpen = false; })">Закрыть</MatButton>
        <MatButton OnClick="@(e => DeleteText(oneContent as Text))">Удалить</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
        bool IsAdminOrCoordinator { get; set; } = false;

        [Parameter]
        public string CourseId { get; set; }

        UserViewModel userViewModel { get; set; } = new UserViewModel();
        List<Quiz> quizzes = new List<Quiz>();
        List<Text> texts = new List<Text>();
        List<object> content { get; set; } = new List<object>();

        bool deleteQuizDialogOpen = false;
        bool deleteTextDialogOpen = false;

        IEnumerator<object> enumerator;
        object oneContent;

        [CascadingParameter]
        Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            IsAdminOrCoordinator = user.IsInRole("Administrator") || user.IsInRole("Coordinator");
        }

        userViewModel = await ((IdentityAuthenticationStateProvider)authStateProvider).GetUserViewModel();

        await ReadTexts();
        await ReadQuizzes();
        content.AddRange(quizzes);
        content.AddRange(texts);
        content = content.OrderBy(t => t is Quiz ? (t as Quiz).When : (t as Text).When).ToList();

        enumerator = content.GetEnumerator();

        if (enumerator.MoveNext())
        {
            oneContent = enumerator.Current;
        }
    }

    public void NextStep()
    {
        oneContent = enumerator.MoveNext() ? enumerator.Current : null;
    }

    async Task ReadQuizzes()
    {
        try
        {
            var result = await apiClient.GetQuizzes(int.Parse(CourseId));
            quizzes = new List<Quiz>(result);
            matToaster.Add(L["One item found", Plural.From("{0} items found", (int)result.InlineCount)], MatToastType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
        }
    }

    public async Task DeleteQuiz(Quiz quiz)
    {
        try
        {
            apiClient.RemoveEntity(quiz);
            await apiClient.SaveChanges();
            content.Remove(quiz);
            matToaster.Add($"{quiz.Id} deleted", MatToastType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
        }

        deleteQuizDialogOpen = false;
    }

    async Task ReadTexts()
    {
        try
        {
            var result = await apiClient.GetTexts(int.Parse(CourseId));
            texts = new List<Text>(result);
            matToaster.Add(L["One item found", Plural.From("{0} items found", (int)result.InlineCount)], MatToastType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
        }
    }

    public async Task DeleteText(Text text)
    {
        try
        {
            apiClient.RemoveEntity(text);
            await apiClient.SaveChanges();
            content.Remove(text);
            matToaster.Add($"{text.Id} deleted", MatToastType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, L["Operation Failed"]);
        }

        deleteTextDialogOpen = false;
    }
}
